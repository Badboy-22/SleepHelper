generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  username     String     @unique
  passwordHash String
  email        String?    @unique
  name         String?
  avatarUrl    String?
  createdAt    DateTime   @default(now())

  sleepLogs    SleepLog[]
  fatigues     FatigueLog[]
  schedules    ScheduleItem[]
}

model SleepLog {
  id           String    @id @default(cuid())
  username     String
  /** “그날” 개념 충돌 방지용: YYYY-MM-DD 문자열로 보관 (KST 자정 경계 이슈 회피) */
  date         String
  sleepStart   DateTime
  sleepEnd     DateTime
  fatiguePct   Int?
  note         String?

  user         User      @relation(fields: [username], references: [username], onDelete: Cascade)
  fatigues     FatigueLog[]

  /** 네가 하루에 여러 로그를 가질 수 있다면 sleepStart까지 포함해 유니크 */
  @@unique([username, date, sleepStart])
  @@index([username, date])
}

enum FatigueType {
  BEFORE_SLEEP
  AFTER_SLEEP
  DAYTIME
}

model FatigueLog {
  id         String      @id @default(cuid())
  username   String
  recordedAt DateTime    @default(now())
  type       FatigueType
  value      Int
  note       String?

  /** SleepLog와의 연결(선택적): 특정 수면 로그와 묶고 싶을 때 */
  sleepLogId String?
  sleepLog   SleepLog?   @relation(fields: [sleepLogId], references: [id], onDelete: SetNull)

  user       User        @relation(fields: [username], references: [username], onDelete: Cascade)

  @@index([username, recordedAt])
  @@index([username, type, recordedAt])
}

model ScheduleItem {
  id        String    @id @default(cuid())
  username  String
  date      DateTime
  title     String
  note      String?
  startAt   DateTime?
  endAt     DateTime?

  user      User      @relation(fields: [username], references: [username], onDelete: Cascade)

  @@index([username, date])
}
